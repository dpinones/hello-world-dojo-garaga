{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":3817733083985676825,"abi":{"parameters":[{"name":"current_x","type":{"kind":"field"},"visibility":"private"},{"name":"current_y","type":{"kind":"field"},"visibility":"private"},{"name":"new_x","type":{"kind":"field"},"visibility":"private"},{"name":"new_y","type":{"kind":"field"},"visibility":"private"},{"name":"salt","type":{"kind":"field"},"visibility":"private"},{"name":"previous_commitment","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/+VZ7W6CQBBcwFbUqlWxfvXjFe4EFP75KjXF93+Cpl6EZEHSH2WWXMMm5C7cOc7OMctdcOgW79frg+7Dy9tT3obqEEXZcZ/pUH+qfXpOYhXF50OiEx0n8dc+CcMsiZJjek6PKtVRmOlLnIYXdQuOpZqFdoG8HnG8VC/HcWr0dCp6qmahkbw5374k4b4Arg9+SCXy9pnAIFzFIDtj1gEQq02zDkjGrENJwkMB3BHZbVaT94gJDMLtpFmfgLzaNCuQd8msY0nCYwHcCdltVpP3hAkMwq3l2jR/swMwhcUDa+CTncV5Sv+jeDpA/Twgr2egfm0WTyRvzncmSXgmgDsnu4unyXvOBAbhdtKsCyBWm2ZdkIxZA0nCgQDukuw2q8l7yQQG4XbSrC9AXm2aFci7ZNaVJOGVAO6a7DaryXvNBAbhihxLzA7AFBb0sWROdhbnjeXrYY6z5ujkgtdjAsSaCvuvKabx3kZAwzUQawPWsAi0ltu/5xxWbxhupi5UX5rfed9h/R7rb/N+8bvd9Xq9Xm90+3rZo3K4YA0egOu+I+xLvMj9gcrPgNHAy8edmjl8rolBpV2ycQ+Yf4EfyOCrPt0H3zgHlTxdNnYCcSjwvF90dytjxVy/ws/B89NUCa/mv4pY5G3A7hV6/gBlAixFQiAAAA==","debug_symbols":"3dbbioMwEAbgd8m1FzlNJvFVlqXYqkUQFQ8Li/TdV4txXS1dSpibXsb888kQJjqyNDsP11NR5XXH4o+RlfUl6Yu6mlYj4/dHXZNU86rrk7ZnMaKOWFalLLbS3CKWF2XGYiNv0SGqFS5Rre02+hkxQWhLQlsR2jrUBuVtY3Y2ENqG0EZC24baKLxt92fpCG3BKXFBiYePpllxt8dDZxOEXaIgD7imxIESN5R46HyC8lHQuMctJe4Icckp8dAJBZAeN/sDlZISV5S4psTDJ9R/9wH5Hn9tQucKfLni4SxZ4L7C4vMGFKw3r/xtYH7PISpRuCUrUannYYHoYYEO/gnzVRbc2G147tG9f4/q4c3iuO/RKfnn5KfFuS3Ksrietv/20+OvpC2Sc5kty3yoLpvd/rvxO76+aetLlg5tNkv3vYn/AQ==","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\nfn check_valid_move(current_x: Field, current_y: Field, new_x: Field, new_y: Field) -> bool {\n    let x_diff = new_x - current_x;\n    let y_diff = new_y - current_y;\n    \n    // Verificar que el movimiento sea de maximo 1 unidad en cualquier direccion\n    // usando solo restas, comparaciones y logica booleana.\n    let one = 1 as Field;\n    let neg_one = 0 - one;\n\n    let x_diff_is_valid = (x_diff == 0) | (x_diff == one) | (x_diff == neg_one);\n    let y_diff_is_valid = (y_diff == 0) | (y_diff == one) | (y_diff == neg_one);\n    \n    x_diff_is_valid & y_diff_is_valid\n}\n\nfn main(\n    current_x: Field,\n    current_y: Field,\n    new_x: Field,\n    new_y: Field,\n    salt: Field,\n    previous_commitment: pub Field\n) {\n    assert(check_valid_move(current_x, current_y, new_x, new_y));\n\n    let prev_hash = hash([current_x, current_y, salt], 3);\n    assert(prev_hash == previous_commitment);\n}\n","path":"/Users/damianalejandropinones/Documents/temp/noir/zkhunt/circuits/hello/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert"]}