{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":3666893824802152329,"abi":{"parameters":[{"name":"current_x","type":{"kind":"field"},"visibility":"private"},{"name":"current_y","type":{"kind":"field"},"visibility":"private"},{"name":"salt","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9WZyW7bQAyGR7G8yEvjOGlyyrFAb9Vi2fLNh+z7K8gb0EtRFH0AH3tpH7moBxlKFDNy25hEbAKGRppfHylqPBpRjnq2+urnqpfmmO3YbCN/0O/Ph+E8iILUD0eTJPb78WSQBEkQJ/EsTKJonvST4WgyGvqjoB/Ng0U8ihb+s1UQy/8/i+gBHVsPxQ2x/jZtB7X3ULti2nCe3lZXvxrKA/TtqXIbv+46qAU6praoj9iX4Q5jGe4gFOJOhbgjIW4kww2FxoNYfqXGWSDEHchwozQD6gkKJrYy43HqF5LkMLNdPpZfCBJm8AoJfl3CoO+X2XrkODw9xkwX7yEuNz/x44yvZOKPPMQU4M88ci+Z+X7dcM6WRb5S9jEEOnoO1pwjzTnSYPYF0lyUaC6R5rJEc4U0VyWaa6S5LtHcIM1NieYWaW5LNHdIc1eiuUea+xLNA9I8lGgekeaxRPOENE9E00FtsDOjgXEn8b9PVutl4XE97ZA8KHSd4Lsq43vmEH9KFf9TivhvKtE5JHCIP4iH5gfudQc0yzwe2ucuX14H9FVRH9zfxur3AelsYwt0PmrDkxfumeRzQmq8azu0xI99aasvVWaQjwo6BnmFPDewnvR5qM9dFv00zb6L/GAWxFEl+k9mf99sa+gcOL9r8V8j/gtxW47RvHgWvWfR67fXj6bdMj89hn7AOerl/0z/xmbf38ii0Dan8fEHsW3eYuQPgV8T4Q+ztVJdJv458Bsi/DC7v57M+MnmoKZMfqbAb8nc3yw/bZn8pMDvyORnBPx3MvmZAH9fhp+9K3Rl8pMA/0CEH2bjsyeTnz7wD2Xyk/GPZPgTWDe9V7nRNe0xOs63fgnm/7qmBf9NEqvUmvaYxEPzg9etuu/EEmvX0kfngBOLnxOLHxurwcg6YmR1GFl1RtYhI4sz9+0tjavGyOoxslqMrG0dq1VGFueYONjSuJqMLJeRta1jgvP/2GVkbeu86jGyKowsWPPbahDaxmbrb2gQq2uJdc8SK+httUHbOqqNtF+/ff7yXRHDjgGO2y4C2QI4JedXSriUj/fbf+k/tbD0wwoGj7ss+h+b4/4GNkyeb442KNZVVbEAq4j/KtH/NPt4EoXtJl8RF8M0WETpIo3T2aw/TXuEr20P5enGtHf742B/sOMfB8Nd+ji47mMT/SCg7dz06QcNvIzpNp1IJccGjok7t+s+CEDh+oxcq0zhOi8MyhSu88KdUOF6JFy4nsgWrvPCnUzhejCQLVznhXeZwnVeeJcpXOcfVmQK13lhUKhwnRUGYZ4EH0rlcwcuOjMWBgOH+FPKXhgE/00SK/eawSH+IB6aH1oY7Fpi7Vr66BzTtfjpWvzYWE1GVoeRVWVkeYysNiOLM/fulsbVYGRxjokWI6vCyNrW8QXrjrcsHtjmzlcXA2CfViFclASsW1cEWMd3LCxtu/Cyf2323/pl/w90tCDkIDMAAA==","debug_symbols":"7dnNauNAEATgd5mzDurpUfeMX2VZgn+UIDC28c/CIvzuK4XIXjZCS9Ux5BbZU7KUrxrEqA+7dnN7e+kOr8dLWP3ow/64XV+742E46kP9/tHltD6MR5fr+nwNK9FchfawG/7y5l6F127fhpXFe/VpqTb2sTTF+rE02szS6FI+1kZXXV4s7va4htL8Z3H9OLPUlv9e/LMK8vVvMc7eYpbpWuqyfIvF9XHy+nklWo8n17mTR2mmk2umTz4cbM7dft+9vfzbyj40s91cvNRG8EjEI4pHEh5p8IjhEccjGY8UOGK4vuH6husbrm+4vuH6husbrm+4vuH6jus7ru+4vuP6jus7ru+4vuP6jus7rp9x/YzrZ1w/4/oZ18+4fsb1M66fcf2M6xdcv+D6BdcvuH7B9QuuX3D9gusXXL/g+sNHREaITCQySmQSkWmIjBEZJzKZyBA9EKIHQvRAiB4I0QMheiBED4TogRA9EKIHQvQgEj2IRA8i0YNI9CASPYhEDyLRg0j0IBI9iEQPlOiBzvYgx2nvJ5t8ikQ8ongkYZH7+zZWH5jhJkwJUlyUGGxiromxJqaaGGpipomRJiaaGGhinolxVlxfcX3F9RXXV1xfcX3F9RXXV1w/4foJ10+4fsL1E66fcP2E6ydcP+H6Cdf/3tn/3tn/yjv7S49+8xv7iwkDnxWHo1/rc7fe7Nvxbdr45e2wnV6uDYfX36fpm+n12+l83La727kdX8Q938GN/xH1Kvn4iDe6iVolSZ4PpOOHlivX4XeH3/4D","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"30":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    /// Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    /// Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"62":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\nfn main(\n    current_x: Field,\n    current_y: Field,\n    salt: Field,\n) {\n    let prev_hash = hash([current_x, current_y, salt], 3);\n    std::println(\"Public leaf:\");\n    std::println(prev_hash);\n}\n","path":"/Users/damianalejandropinones/Documents/temp/noir/zkhunt/circuits/hash/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","print_unconstrained"]}